/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Game;

import GameEntities.Coworker;
import GameEntities.Enemy;
import GameEntities.Player;
import HelperClasses.DescriptionHelper;
import HelperClasses.MenuHelper;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Random;

/**
 *
 * @author Brian
 */
public class Game {

    Player player = new Player("new");
    Coworker coworker = new Coworker("new");
    Random random = new Random();

    public Game(int difficulty, Coworker coworker, Player player) {
        this.difficulty = difficulty;
        this.coworker = coworker;
        this.player = player;
    }

    DecimalFormat timeFormat = new DecimalFormat("00.00");
    private int floorsToSurface = 70;
    private int day = 1;
    private int radiationLevel = 1;
    private int difficulty;
    private String room;
    private String supplyType;
    private String radiationOutput;
    private double time = 06;
    private boolean roomClear = true;
    private ArrayList<Enemy> enemyList;
    int pHealth = player.getHealth();
    int cHealth = coworker.getHealth();
    int pStamina = player.getStamina();
    int cStamina = coworker.getStamina();
    int pAmmo = player.getAmmo();
    int cAmmo = coworker.getAmmo();

    public String listEnemies() {
        if (enemyList.isEmpty()) {
            return "None.";
        }
        String enemies = "";

        for (Enemy enemy : enemyList) {
            enemies += enemy.getName() + " ";
        }
        return enemies;
    }

    private void getNewRoom() {
        int roll = random.nextInt(15);
        switch (roll) {
            case 0:
            case 1:
                room = "Janitor's Closet";
                break;

            case 2:
            case 3:
                room = "Hallway";
                break;

            case 4:
            case 5:
            case 6:
                room = "Office";
                break;

            case 7:
            case 8:
            case 9:
                room = "Testing Lab";
                break;

            case 10:
                room = "Elevator";
                break;

            case 11:
            case 12:
                room = "Breakroom";
                break;

            case 13:
                room = "Medbay";
                break;

            case 14:
                room = "Security Room";
                break;

            case 15:
                room = "Waiting Room";
                break;

        }
    }

    private void getNewRoomEnemies() {
        int roll = random.nextInt(10);
        if (roll > 0) {
            Enemy headCrab1 = new Enemy("Headcrab", 5, 1, 10);
            Enemy headCrab2 = new Enemy("Headcrab", 5, 1, 10);
            Enemy soldier = new Enemy("Soldier", 10, 3, 20);
            enemyList.add(soldier);
            enemyList.add(headCrab1);
            enemyList.add(headCrab2);
            roomClear = false;
        }

    }

    private String getRadiationLevels() {
        if (radiationLevel >= 80) {
            radiationOutput = "Warning: Hazardous radiation levels detected.";
        } else if (radiationLevel < 80 && radiationLevel >= 40) {
            radiationOutput = "Caution: Minor radiation levels detected.";
        } else {
            radiationOutput = "Notice: Minimum radiation levels detected.";
        }
        return radiationOutput;
    }

    private double getNewTime() {
        time += 1;
        if (time > 24) {
            double leftOverTime = time - 24;
            time = 0 + leftOverTime;
            day += 1;
        }

        return time;
    }

    private void outputTurnInformation() {
        System.out.println("\nDay:   " + day + "            Floors to surface: " + floorsToSurface + "    Radiation levels: " + this.getRadiationLevels());
        System.out.println("Time: " + timeFormat.format(time) + "         Location: " + room + "   Enemies present: " + this.listEnemies());
        System.out.print(DescriptionHelper.getStatus(player));
        System.out.print(DescriptionHelper.getStatus(coworker));
    }

    private void processTurn() {
        if (roomClear) {
            int menuChoice = MenuHelper.displayMenu(" 1)Rest\n 2)Search for supplies\n 3)Move stealthily\n 4)Move normally\n 5)Run\n", 1, 5);
            switch (menuChoice) {
                case 1:
                    this.processRest();
                    break;
                case 2:
                    //this.processSuppliesSearch();
                    break;
                case 3:
                    this.processMoveStealthily();
                    break;
                case 4:
                    this.processMoveNormally();
                    break;
                case 5:
                    this.processRun();

            }
        } else {
            int menuChoice = MenuHelper.displayMenu(" 1) Fight\n 2) Run", 1, 2);
            switch (menuChoice) {
                case 1:
                    this.processFight();
                    break;
                case 2:
                    this.processRun();

            }
        }
    }

    private void processRest() {
        if (pStamina < 100) {
            player.adjustStamina(pStamina += 50);
        }
        if (cStamina < 100) {
            coworker.adjustStamina(pStamina += 50);
        }
        time += 3;
        this.getNewTime();
        radiationLevel += 4;
    }

    private void processFight() {
        enemyList.clear();
        System.out.println("You defeated the enemies.");
        roomClear = true;
    }

    private void processMoveStealthily() {
        this.getNewTime();
        this.getNewRoom();
        radiationLevel += 3;
        time += 2;
    }

    private void processMoveNormally() {
        this.getNewTime();
        this.getNewRoom();
        this.getNewRoomEnemies();
        pStamina -= 10;
        cStamina -= 10;
        time += 1;
        radiationLevel += 2;
    }

    private void processRun() {
        this.getNewTime();
        this.getNewRoom();
        this.getNewRoomEnemies();
        pStamina -= 30;
        cStamina -= 30;
        radiationLevel += 1;
    }

    public void start() {
        this.room = "Waiting Room";
        this.roomClear = true;
        while (0 <= pHealth) {
            this.outputTurnInformation();
            this.processTurn();
        }
        System.out.println("You lose.");
    }
}
