/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Game;

import GameEntities.Coworker;
import GameEntities.Player;
import HelperClasses.DescriptionHelper;
import HelperClasses.MenuHelper;
import java.text.DecimalFormat;
import java.util.Random;

/**
 *
 * @author Brian
 */
public class Game {

    Player player;
    Coworker coworker;
    DecimalFormat timeFormat = new DecimalFormat("0#:00");
    Random random = new Random();
    private int floorsToSurface = 70;
    private int day = 1;
    private int radiationLevel = 1;
    private String room;
    private String enemyType;
    private String supplyType;
    private String radiationOutput;
    private double time = 06;
    private boolean roomClear = true;
    int pHealth = player.getHealth();
    int cHealth = coworker.getHealth();
    int pStamina = player.getStamina();
    int cStamina = coworker.getStamina();
    int pAmmo = player.getAmmo();
    int cAmmo = coworker.getAmmo();

    private boolean checkCoworkerCanTravel() {
        boolean canTravel = true;

        return canTravel;
    }

    private void getNewRoom() {
        int roll = random.nextInt(15);
        switch (roll) {
            case 0: case 1:
                room = "Janitor's Closet";
                break;

            case 2: case 3:
                room = "Hallway";
                break;

            case 4:case 5:case 6:
                room = "Office";
                break;

            case 7:case 8:case 9:
                room = "Testing Lab";
                break;

            case 10:
                room = "Elevator";
                break;

            case 11:case 12:
                room = "Breakroom";
                break;

            case 13:
                room = "Medbay";
                break;

            case 14:
                room = "Security Room";
                break;

            case 15:
                room = "Waiting Room";
                break;

        }
    }

    private void getNewRoomEnemies() {
        int roll = random.nextInt(10);
        switch (roll) {
            case 0: case 1:
                enemyType = "One Soldier";
                roomClear = false;
                break;
            case 2: case 3:
                enemyType = "A couple headcrabs";
                roomClear = false;
                break;
            case 4:
                enemyType = "Multiple Xen";
                roomClear = false;
                break;
            case 5:
                enemyType = "Multple Soldiers";
                roomClear = false;
                break;
            case 6: case 7: case 8: case 9:
                enemyType = "Empty";
                roomClear = true;
                break;
            case 10:
                enemyType = "Soldiers and Xen";
                break;
        }

    }

    private void getNewRoomSupplies() {
        int roll = random.nextInt(7);
        switch (roll) {
            case 0:
                supplyType = "Small ammo";

            case 1:
                supplyType = "Big ammo";

            case 2:
                supplyType = "Medkit";

            case 3:
                supplyType = "Bandage";
            case 4:
            case 5:
            case 6:
            case 7:
                supplyType = "None.";
        }
    }

    private String getRadiationLevels() {
        if (radiationLevel >= 80) {
            radiationOutput = "Warning: Hazardous radiation levels detected.";
        } else if (radiationLevel < 80 && radiationLevel >= 40) {
            radiationOutput = "Caution: Minor radiation levels detected.";
        } else {
            radiationOutput = "Notice: Minimum radiation levels detected.";
        }
        return radiationOutput;
    }

    private double getNewTime() {
        time += 1;
        if (time > 24) {
            time = 0;
            day += 1;
        }

        return time;
    }

    private void outputTurnInformation() {
        System.out.println("Day:   " + day + "         Floors to surface: " + floorsToSurface + "   Radiation levels: " + radiationOutput);
        System.out.println("Time: " + timeFormat.format(time) + "         Location: " + room + "   Enemies present: " + enemyType);
        System.out.print(DescriptionHelper.getStatus(player));
        System.out.print(DescriptionHelper.getStatus(coworker));
    }

    private void processTurn() {
        if (roomClear) {
            int menuChoice = MenuHelper.displayMenu(" 1)Rest\n 2)Search for supplies\n 3)Move stealthily\n 4)Move normally\n 5)Run\n", 1, 5);
            switch (menuChoice){
                case 1:
                    this.processRest();
                break;
                case 2:
                    this.processSuppliesSearch();
                break;
                case 3:
                    this.processMoveStealthily();
                break;
                case 4:
                    this.processMoveNormally();
                break;
                case 5:
                    this.processRun();
                    
            }
        } else {
            int menuChoice = MenuHelper.displayMenu(" 1) Fight\n 2) Run", 1, 2);
            switch (menuChoice){
                case 1:
                    this.processFight();
                    break;
                case 2:
                    this.processRun();
                    
            }
        }
    } 

    private void processRest() {
        if (pStamina < 100) {
            pStamina = 100;
        }
        if (cStamina < 100) {
            cStamina = 100;
        }
        time += 2;
    }
    
    private void processFight(){
        int roll = random.nextInt(9)+1;
        if (pAmmo > 0 || cAmmo > 0){
            switch(roll){
                case 10: case 9: case 8: case 7:
                    int pAmmoSpent = random.nextInt(24);
                    int cAmmoSpent = random.nextInt(24);
                    int pHealthLost = random.nextInt(20);
                    int cHealthLost = random.nextInt(20);
                    pAmmo -= pAmmoSpent;
                    cAmmo -= cAmmoSpent;
                    pHealth -= pHealthLost;
                    cHealth -= cHealthLost;
                    System.out.println("You successfully defeat the enemy. You and " + coworker.getName() + " expended a total of " + (pAmmoSpent + cAmmoSpent) + " bullets.");
                    enemyType = "None";
                    roomClear = true;
            }
        }
        
    }

    private void processSuppliesSearch() {
        this.getNewTime();
        int roll = random.nextInt(999) + 1;
        switch (room) {
            case "Janitor's Closet":
                if (roll > 700) {
                    supplyType = "Bandage";
                } else if (roll <= 700 && roll > 600) {
                    supplyType = "Medkit";
                } else if (roll <= 600 && roll > 500) {
                    supplyType = "Small Ammo";
                } else if (roll <= 500 && roll > 450) {
                    supplyType = "Big Ammo";
                } else {
                    supplyType = "None";
                }
                break;
            case "Hallway":
                if (roll > 700) {
                    supplyType = "Bandage";
                } else if (roll <= 700 && roll > 600) {
                    supplyType = "Medkit";
                } else if (roll <= 600 && roll > 500) {
                    supplyType = "Small Ammo";
                } else if (roll <= 500 && roll > 450) {
                    supplyType = "Big Ammo";
                } else {
                    supplyType = "None";
                }
                break;
            case "Office":
                if (roll > 600) {
                    supplyType = "Bandage";
                } else if (roll <= 600 && roll > 400) {
                    supplyType = "Medkit";
                } else if (roll <= 400 && roll > 350) {
                    supplyType = "Small Ammo";
                } else if (roll <= 350 && roll > 325) {
                    supplyType = "Big Ammo";
                } else {
                    supplyType = "None";
                }
                break;
            case "Testing Lab":
                if (roll > 600) {
                    supplyType = "Bandage";
                } else if (roll <= 600 && roll > 300) {
                    supplyType = "Medkit";
                } else if (roll <= 300 && roll > 250) {
                    supplyType = "Small Ammo";
                } else if (roll <= 250 && roll > 225) {
                    supplyType = "Big Ammo";
                } else {
                    supplyType = "None";
                }
                break;
            case "Elevator":
                if (roll > 790) {
                    supplyType = "Bandage";
                } else if (roll <= 790 && roll > 740) {
                    supplyType = "Medkit";
                } else if (roll <= 740 && roll > 715) {
                    supplyType = "Small Ammo";
                } else if (roll <= 715 && roll > 700) {
                    supplyType = "Big Ammo";
                } else {
                    supplyType = "None";
                }
                break;
            case "Break Room":
                if (roll > 700) {
                    supplyType = "Bandage";
                } else if (roll <= 700 && roll > 500) {
                    supplyType = "Medkit";
                } else if (roll <= 500 && roll > 450) {
                    supplyType = "Small Ammo";
                } else if (roll <= 450 && roll > 425) {
                    supplyType = "Big Ammo";
                } else {
                    supplyType = "None";
                }
                break;
            case "Medbay":
                if (roll > 700) {
                    supplyType = "Bandage";
                } else if (roll <= 700 && roll > 200) {
                    supplyType = "Medkit";
                } else if (roll <= 200 && roll > 175) {
                    supplyType = "Small Ammo";
                } else if (roll <= 175 && roll > 150) {
                    supplyType = "Big Ammo";
                } else {
                    supplyType = "None";
                }
                break;
            case "Security Room":
                if (roll > 900) {
                    supplyType = "Bandage";
                } else if (roll <= 900 && roll > 700) {
                    supplyType = "Medkit";
                } else if (roll <= 700 && roll > 600) {
                    supplyType = "Small Ammo";
                } else if (roll <= 600 && roll > 150) {
                    supplyType = "Big Ammo";
                } else {
                    supplyType = "None";
                }
                break;
            case "Waiting Room":
                if (roll > 700) {
                    supplyType = "Bandage";
                } else if (roll <= 700 && roll > 600) {
                    supplyType = "Medkit";
                } else if (roll <= 600 && roll > 500) {
                    supplyType = "Small Ammo";
                } else if (roll <= 500 && roll > 450) {
                    supplyType = "Big Ammo";
                } else {
                    supplyType = "None";
                }
                break;

        }

    }
    
    private void processMoveStealthily(){
        this.getNewTime();
        this.getNewRoom();
        radiationLevel += 3;
        time += 2;    
    }
    
    private void processMoveNormally(){
        this.getNewTime();
        this.getNewRoom();
        this.getNewRoomEnemies();
        time +=1;
        radiationLevel += 2;        
    }
    
    private void processRun(){
        this.getNewTime();
        this.getNewRoom();
        this.getNewRoomEnemies();
        radiationLevel += 1;
    }
    
    
    
}
